{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-quickform","title":"What is QuickForm?","text":"<p>QuickForm is a blazor component which allows you to create downright gorgeous HTML forms with minimal effort. The simplicity of the component does not sacrifice customization!</p>"},{"location":"#who-is-quickform-for","title":"Who is QuickForm for?","text":"<p>QuickForm is for Developers who value their time!  those who do not wish to spend their precious hours writing boilerplate forms.</p> <p>I created this library to solve my own problems, to save my own time. But over the months, it quickly grew into a passionate project which I believe will save a lot of dev-hours for a lot of people.</p>"},{"location":"#features","title":"Features:","text":"<ul> <li> <p> Very simple to set up</p> <p>Install <code>QuickForm</code> with <code>dotnet add</code> and get up and running in minutes!</p> <p> Getting started</p> </li> <li> <p> Customizable</p> <p>Need a custom form? QuickForm has you covered. Head over to the customization page to see what you can do.</p> <p> Customization</p> </li> <li> <p> Beautiful validation support out of the box!</p> <p>All QuickForm components support validation by default. This includes <code>FluentValidation</code> and <code>DataAnnotations</code> </p> <p> Validation</p> </li> <li> <p> Open Source, MIT</p> <p>QuickForm is licensed under MIT and is available on GitHub as an open source project.</p> <p> License</p> </li> </ul>"},{"location":"#get-started-in-less-than-5-minutes","title":"Get started in less than 5 minutes","text":"<p>Getting started </p>"},{"location":"#attribution","title":"Attribution","text":"<p>Big thanks to Anton Toshik,  for inspiration about Expressions and Reflection.</p> <p>blazor-university best place to learn blazor! </p> <p>And thank you, for using QuickForm! \ud83d\udc97</p>"},{"location":"api/","title":"Api","text":""},{"location":"api/#iquickformfieldt","title":"<code>IQuickFormField&lt;T&gt;</code>","text":"<p>Represents an input field in a QuickForm{TEntity}</p>"},{"location":"api/#properties","title":"Properties","text":"Property Description Notes <code>EditorId</code> Id for the input element. This is automatically generated <code>DisplayName</code> Display name for the input element. <code>Description</code> Description for the input element, if any. <code>ValidFeedback</code> Valid feedback for the input element, if any. <code>InputComponent</code> Input component template, which is automatically generated. The string parameter is the class to be applied to the input element. <code>ValidationMessages</code> Validation message element template, which is automatically generated. the string parameter is the class to be applied to the input element."},{"location":"attributes/","title":"Customizing with attributes","text":""},{"location":"attributes/#all-attributes","title":"All attributes","text":"Attribute Description Input tag modification <code>[Required]</code> Mark a field as required. Adds <code>required</code> attribute to the underlying HTML input element, and validations. <code>[Editable]</code> Specifies whether or not the field should be editable. Adds <code>disabled</code> and <code>readonly</code> attributes to the underlying HTML input element, as well as removing the event callbacks for when the value changes, so that users cant edit the HTML and bypass security <code>[NotMapped]</code> Specifies that the property should be skipped during form generation - <code>[Display]</code> Specifies the Display Name and the Description for the field Adds the <code>DisplayName</code> as the label of the field and <code>Description</code> after the field as muted text (if any). <code>[DisplayName]</code> Specifies the DisplayName of the field, this is similar to <code>[Display]</code>. This also works on Enums Overrides the label of the field with the provided value <code>[Description]</code> Specifies the Description of the field, this is similar to <code>[Display]</code> Adds the provided value after the field as muted text <code>[Placeholder]</code> Specifies the Placeholder of the field, default placeholder text is \"Please enter {DisplayName}...\" Adds the provided value as the placeholder of the field <code>[DataList]</code> Specifies the DataList for the field, the data list be must be defined in the document Adds the provided value as the placeholder of the field <code>[DataType]</code> Specifies the DataType of the field. See supported DataTypes below. Adds the appropriate value as the type attribute of the input field <code>[DateType]</code> Specifies the DateType of the field. See supported DateTypes below. Adds the appropriate value as the type attribute of the input field <code>[Range]</code> Specifies the range of values for a numeric field. Adds the appropriate value as the min and max attributes of the input field, and transforms this input into a bootstrap Slider Range"},{"location":"attributes/#datatypes","title":"DataTypes","text":"DataType HTML type attribute <code>DataType.Date</code> <code>date</code> <code>DataType.Time</code> <code>time</code> <code>DataType.DateTime</code> <code>datetime-local</code> <code>DataType.EmailAddress</code> <code>email</code> <code>DataType.Password</code> <code>password</code> <code>DataType.PhoneNumber</code> <code>tel</code> <code>DataType.Url</code> or <code>DataType.ImageUrl</code> <code>url</code> <code>DataType.MultilineText</code> <code>null</code> <code>DataType(\"custom\")</code> <code>custom</code> <p>Custom data types</p> <p>Custom data types are useful for <code>hidden</code>, <code>search</code>, or other relatively-rare input types.</p>"},{"location":"attributes/#datetypes","title":"DateTypes","text":"DateType HTML type attribute <code>InputDateType.Date</code> <code>date</code> <code>InputDateType.Time</code> <code>time</code> <code>InputDateType.DateTimeLocal</code> <code>datetime-local</code> <code>InputDateType.Month</code> <code>month</code>"},{"location":"customization/","title":"Customization","text":"<p>While being effortless to use, QuickForm is flexible enough to support a wide variety of customization.</p> <p>There are a few ways to customize QuickForm:</p> <ul> <li>Using attributes: To decorate the individual fields and their looks.</li> <li>Customizing the whole layout: To create a custom QuickForm component with a custom layout and custom styles   + any additional parameters you may need</li> </ul>"},{"location":"customization/#custom-layout","title":"Custom layout","text":"<p>This is a step-by-step guide to creating a custom form styled with TailwindCSS.</p> <p>Please note, that this process may seem a little complex for users who are not familiar with Blazor.</p>"},{"location":"customization/#define-the-directives","title":"Define the directives","text":"AppForm.razor - declaring directives<pre><code>@inherits QuickForm&lt;TEntity&gt;// (1)!\n@typeparam TEntity where TEntity : class, new()// (2)!\n</code></pre> <ol> <li>The <code>@inherits</code> directive is used to specify the base class for this component.</li> <li>The <code>@typeparam</code> directive is used to specify that the component will be generic and work with any type.</li> </ol>"},{"location":"customization/#create-the-layouts","title":"Create the layouts","text":"AppForm.razor - setting parameters and field layouts<pre><code>@{\n    // Additional attributes, in this case, it is the class to be applied to the form.\n    AdditionalAttributes ??= new Dictionary&lt;string, object&gt;();\n    AdditionalAttributes.Add(\"class\", \"flex flex-col\");\n\n    // Field layout\n    ChildContent = context =&gt;// (1)!\n        @&lt;div class=\"flex flex-col\"&gt;\n            &lt;label for=\"@context.EditorId\"&gt;// (2)!\n                @context.DisplayName// (3)!\n            &lt;/label&gt;\n\n            @context.InputComponent(\"peer\")// (4)!\n\n            &lt;span class=\"text-gray-500\"&gt;\n                @context.Description// (5)!\n            &lt;/span&gt;\n\n             &lt;span class=\"hidden peer-[.valid]:block text-green-700\"&gt;\n                 @context.ValidFeedback// (6)!\n             &lt;/span&gt;\n\n            @context.ValidationMessages(\"hidden peer-[.invalid]:block text-red-700\")// (7)!\n        &lt;/div&gt;;\n\n    // Submit button layout\n    SubmitButtonTemplate =\n        @&lt;button type=\"submit\" class=\"border border-green-500 text-green-500\"&gt;\n            submit\n        &lt;/button&gt;;\n}\n</code></pre> <ol> <li> <p>The markup inside the <code>ChildContent</code> fragment, will be applied to individual fields.    The <code>@context</code> object is used to access the field's metadata and the input component. It is an IQuickFormField object.</p> </li> <li> <p><code>@context.EditorId</code> is a string, which holds the id of the input field. This can be used to associate the label with the input field.    It is automatically generated.</p> </li> <li> <p><code>@context.DisplayName</code> is a string, which holds the display name for the field. This can be set using the <code>[DisplayName]</code> or <code>[Display(Name = ...)]</code> attribute.</p> </li> <li> <p><code>@context.InputComponent</code> is a RenderFragment&lt;string&gt;    that renders the input field.  The string parameter for this RenderFragment is the CSS class to be applied to the input field.</p> </li> <li> <p><code>@context.Description</code> is a string, which holds the description for the field. This can be set using the <code>[Description]</code> or <code>[Display(Description = ...)]</code> attribute.</p> </li> <li> <p><code>@context.ValidFeedback</code> is a string, which holds the valid feedback for the field. This can be set using the <code>[ValidFeedback]</code> attribute.</p> </li> <li> <p>Just like the <code>@context.InputComponent</code>, <code>@context.ValidationMessages</code> is also    a RenderFragment&lt;string&gt; that renders the validation messages.     The string parameter for this RenderFragment is the CSS class to be applied to the container    element containing validation messages.</p> </li> </ol> <p>@context</p> <p>See IQuickFormField interface for more information on the <code>@context</code> object and what fields are available to you.</p>"},{"location":"customization/#important-add-the-base-components-markup","title":"Important! add the base component's markup","text":"AppForm.razor - parent markup rendering<pre><code>@{\n    base.BuildRenderTree(__builder); // (1)!\n}\n</code></pre> <ol> <li>This line is used to call your custom component's base class's - QuickForm's <code>BuildRenderTree</code> method.</li> </ol> <p>Important</p> <p>This is necessary to render the form and its fields. Without this line your form will not be rendered.</p>"},{"location":"customization/#congratulations","title":"Congratulations!","text":"<p>You can now use your component all around your application!</p> <p>Here is what the output should look like:</p> <p></p> <p>As an exercise to get better with using the library, try creating a component for a different CSS framework, or even a custom one!</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#add-the-package","title":"Add the package","text":"<p>You can use the <code>dotnet add</code> to add the QuickForm package to your project.</p> <pre><code>dotnet add package QuickForm\n</code></pre>"},{"location":"getting-started/#import-the-namespace","title":"Import the namespace","text":"<p>Import the <code>QuickForm.Components</code> namespace in your <code>_Imports.razor</code> or component / page file.</p> <p>Importing namespaces for customization</p> <p>If you plan to customize the form, you will also need to import the following namespaces</p> <ul> <li><code>QuickForm.Attributes</code></li> <li><code>System.ComponentModel</code></li> <li><code>System.ComponentModel.DataAnnotations</code> </li> </ul> _Imports.razor<pre><code>@using QuickForm.Components\n@using QuickForm.Attributes\n@using System.ComponentModel\n@using System.ComponentModel.DataAnnotations\n</code></pre>"},{"location":"getting-started/#choose-your-components","title":"Choose your components","text":"<p>QuickForm comes with two default implementations to get you started:</p> <ul> <li><code>TwQuickForm&lt;TEntity&gt;</code> - A form component that uses TailwindCSS classes for styling</li> <li><code>BsQuickForm&lt;TEntity&gt;</code> - A form component that uses Bootstrap classes for styling</li> </ul> <p>Customization</p> <p>if you wish to customize the form to suit your own needs, see Customization</p> Preview of the components <p>This is what the components could look like, depending on the one you choose.</p> <p>The tailwind version has dark mode support and hover effects.</p> <p>Keep in mind you can always customize and create a custom form, for your specific needs.</p> TailwindBootstrap <p></p> <p></p>"},{"location":"getting-started/#create-your-model","title":"Create your model","text":"<pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre>"},{"location":"getting-started/#decorate-your-model","title":"Decorate your model","text":"<p>Here are some of the most common and basic attributes you can use to customize and flavor the generated form</p> <ul> <li><code>[Required]</code> - Marks a property as required</li> <li><code>[DisplayName]</code> - Changes the display name of a property - label text</li> <li><code>[Description]</code> - Adds a description to the input - text below the input</li> <li><code>[Placeholder]</code> - Adds a placeholder to the input - text inside the input</li> <li><code>[Range]</code> - Adds a range validation to the input</li> </ul> <pre><code>public class Person\n{\n    [Required]\n    [Description(\"We will never disclose your personal details with third parties.\")]\n    public string Name { get; set; }\n\n    [Required]\n    [DisplayName(\"Your age\")]\n    [Range(18, 100)]\n    public int Age { get; set; }\n}\n</code></pre> <p>Attributes</p> <p>For a list of all available attributes, see Attributes</p>"},{"location":"getting-started/#create-the-form","title":"Create the form","text":"TailwindBootstrap <p><pre><code>&lt;TwQuickForm Model=\"@Person\" OnValidSubmit=\"@HandleValidSubmit\" /&gt;\n</code></pre> <pre><code>@code \n{\n    private Person Person = new Person();\n\n    private void HandleValidSubmit()\n    {\n        // Do something with the form data\n    }\n}\n</code></pre></p> <p><pre><code>&lt;BsQuickForm Model=\"@Person\" OnValidSubmit=\"@HandleValidSubmit\" /&gt;\n</code></pre> <pre><code>@code \n{\n    private Person Person = new Person();\n\n    private void HandleValidSubmit()\n    {\n        // Do something with the form data\n    }\n}\n</code></pre></p>"},{"location":"getting-started/#congratulations","title":"Congratulations!","text":"<p>You now have a fully functional form with validation and submit handling.</p> TailwindBootstrap <p></p> <p></p>"},{"location":"getting-started/#next-steps","title":"Next steps","text":"<ul> <li> Create a custom form</li> <li> Check out the attributes</li> </ul>"},{"location":"validation/","title":"Validation","text":"<p>QuickForm has two types of validation</p> <ul> <li><code>DataAnnotationsValidator</code></li> <li><code>Blazored.FluentValidationValidator</code></li> </ul> <p>Both of which can be disabled with setting <code>EnableDataAnnotationsValidation</code> and <code>EnableFluentValidation</code> parameters to false.</p>"},{"location":"validation/#dataannotationattributes","title":"DataAnnotationAttributes","text":"<pre><code>public class User\n{\n    [Required]\n    public string Name { get; set; }\n\n    [Range(18, 100. ErrorMessage = \"You must be 18 years or older to register\")]\n    public int Age { get; set; }\n\n    [RegularExpression(@\"^(?=.*[a-z])(?=.*[A-Z]).{8,32}$\", ErrorMessage = \"Password must have at least 8 characters, one uppercase letter, one lowercase letter...\")]\n    public string Password { get; set; }\n}\n</code></pre>"},{"location":"validation/#fluentvalidation","title":"FluentValidation","text":"<pre><code>public class ProductCreateCommand\n{\n    public string Name { get; set; }\n\n    public decimal Price { get; set; }\n}\n\npublic class ProductCreateCommandValidator : AbstractValidator&lt;ProductCreateCommand&gt;\n{\n    public ProductCreateCommandValidator(IProductRepository productRepository)\n    {\n        RuleFor(x =&gt; x.Name)\n            .NotEmpty()\n            .WithMessage(\"Name is required\")\n            .MustAsync(async (name, product, cancellationToken) =&gt; {\n                var product = await productRepository.GetByNameAsync(name, cancellationToken);\n                return product is null;\n            })\n            .WithMessage(\"Product with this name already exists\");\n\n        RuleFor(x =&gt; x.Price)\n            .GreaterThan(0)\n            .WithMessage(\"Price must be greater than 0\");\n    }\n}\n</code></pre> <p>Info</p> <p>These validation rules will be automatically applied to your form,  all fields will get validated when they are changed.</p>"}]}